name: Trigger and Check Jenkins 3D Player Job

on:
  workflow_dispatch:
    inputs:
      deployment_server:
        description: "The IP address of the server to deploy to"
        required: true
        default: "45.79.122.237"
      port:
        description: "The port to deploy the application on (between 8000 and 9000)"
        required: true
        default: "8000"
      branch_name:
        description: "The Git branch to build from"
        required: true
        default: "main"

jobs:
  trigger-and-check-jenkins:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Trigger Jenkins Parameterized Job
        id: trigger-jenkins
        run: |
          JOB_NAME="3d-player-build-job"
          JENKINS_URL="http://45.79.122.237:8080"
          USERNAME="coral"
          TOKEN="11a6a553d88e61d4bc691f2c8e6c0cad98"
          DEPLOYMENT_SERVER=$(echo "${{ github.event.inputs.deployment_server }}" | tr -d '\n\r')
          PORT=$(echo "${{ github.event.inputs.port }}" | tr -d '\n\r')
          BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | tr -d '\n\r')

          # URL encode parameters
          DEPLOYMENT_SERVER_ENCODED=$(echo $DEPLOYMENT_SERVER | jq -s -R -r @uri)
          PORT_ENCODED=$(echo $PORT | jq -s -R -r @uri)
          BRANCH_NAME_ENCODED=$(echo $BRANCH_NAME | jq -s -R -r @uri)

          # Trigger the Jenkins parameterized job with inputs
          curl -X POST -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/buildWithParameters?DEPLOYMENT_SERVER=$DEPLOYMENT_SERVER_ENCODED&PORT=$PORT_ENCODED&BRANCH_NAME=$BRANCH_NAME_ENCODED" -v
          
          echo "Jenkins parameterized job triggered."

      - name: Check Jenkins Job Status
        id: jenkins-status
        run: |
          JOB_NAME="3d-player-build-job"
          JENKINS_URL="http://45.79.122.237:8080"
          USERNAME="coral"
          TOKEN="11a6a553d88e61d4bc691f2c8e6c0cad98"

          # Get the job status and additional info from Jenkins
          BUILD_INFO=$(curl -s -u $USERNAME:$TOKEN $JENKINS_URL/job/$JOB_NAME/lastBuild/api/json)
          STATUS=$(echo $BUILD_INFO | jq -r '.result')
          BUILD_NUMBER=$(echo $BUILD_INFO | jq -r '.number')
          BUILD_TIMESTAMP=$(echo $BUILD_INFO | jq -r '.timestamp')

          # Convert timestamp to human-readable date
          BUILD_DATE=$(date -d @"$(($BUILD_TIMESTAMP / 1000))" +'%Y-%m-%d %H:%M:%S')

          if [ "$STATUS" == "null" ]; then
            echo "Job is running or has never been built."
            STATUS="RUNNING"
          fi

          echo "Job Status: $STATUS"
          echo "Build Number: $BUILD_NUMBER"
          echo "Build Date: $BUILD_DATE"

          # Set outputs
          echo "status=$STATUS" >> $GITHUB_ENV
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_date=$BUILD_DATE" >> $GITHUB_ENV

      - name: Append Job Status to STATUS.md
        run: |
          # Define badge color based on job status
          if [ "$status" == "SUCCESS" ]; then
            COLOR="green"
          elif [ "$status" == "FAILURE" ]; then
            COLOR="red"
          elif [ "$status" == "UNSTABLE" ]; then
            COLOR="yellow"
          else
            COLOR="blue"
          fi

          # Append the new status to STATUS.md with the job status badge, build number, and build date
          {
            echo "![Jenkins Job Status](https://img.shields.io/badge/Jenkins-$status-$COLOR?style=flat-square)"
            echo ""
            echo "Build Number: $build_number"
            echo "Build Date: $build_date"
            echo "---"
          } >> STATUS.md

      - name: Commit and Push STATUS.md
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add STATUS.md
          git commit -m "Update STATUS.md with Jenkins job status"
          git push https://x-access-token:${GH_TOKEN}@github.com/TAGisON/3d-player.git
