name: Install Prerequisites and Trigger Jenkins Job

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'The IP address of the server'
        required: true
        default: '45.79.122.237'
      ssh_user:
        description: 'SSH user'
        required: true
        default: 'coral'
      ssh_password:
        description: 'SSH password'
        required: true
        default: ''
      jenkins_job:
        description: 'Jenkins Job to verify installation'
        required: true

jobs:
  install_and_trigger:
    runs-on: ubuntu-latest

    steps:
      - name: Install Prerequisites on Server
        env:
          SERVER_IP: ${{ github.event.inputs.server_ip }}
          SSH_USER: ${{ github.event.inputs.ssh_user }}
          SSH_PASSWORD: ${{ github.event.inputs.ssh_password }}
        run: |
          echo "Installing prerequisites on the server..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
            sudo apt update
            sudo apt install -y git curl make net-tools python3-venv pipx
            sudo pipx install --force ansible
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
          EOF

      - name: Clone Repository and Update hosts.ini
        env:
          SERVER_IP: ${{ github.event.inputs.server_ip }}
          SSH_USER: ${{ github.event.inputs.ssh_user }}
          SSH_PASSWORD: ${{ github.event.inputs.ssh_password }}
        run: |
          echo "Cloning repository and updating hosts.ini..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << EOF
            if [ -d "aether-onramp" ]; then
              echo "Removing existing aether-onramp directory..."
              sudo rm -rf aether-onramp
            fi
            git clone --recursive https://$GITHUB_ACTOR:${{ secrets.GH_TOKEN }}@github.com/TAGisON/aether-onramp.git
            cd aether-onramp || { echo "Failed to change directory"; exit 1; }
            echo "[node1]" >> hosts.ini
            echo "${SERVER_IP} ansible_user=${SSH_USER} ansible_password=${SSH_PASSWORD}" >> hosts.ini
            sed -i "s/ip: \"10.76.28.113\"/ip: \"${SERVER_IP}\"/" vars/main.yml
          EOF

      - name: Trigger Jenkins Job
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          JENKINS_JOB: ${{ github.event.inputs.jenkins_job }}
        run: |
          echo "Triggering Jenkins job..."
          RESPONSE=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" -X POST "$JENKINS_URL/job/$JENKINS_JOB/build")
          echo "Response: $RESPONSE"

      - name: Wait for Jenkins Job to Complete
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          JENKINS_JOB: ${{ github.event.inputs.jenkins_job }}
        run: |
          echo "Waiting for Jenkins job to complete..."
          MAX_WAIT_TIME=600  # maximum wait time in seconds
          SLEEP_INTERVAL=30
          ELAPSED_TIME=0

          while true; do
            JOB_INFO=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" "$JENKINS_URL/job/$JENKINS_JOB/api/json")
            BUILD_STATUS=$(echo "$JOB_INFO" | jq -r '.lastBuild.result')
            BUILD_NUMBER=$(echo "$JOB_INFO" | jq -r '.lastBuild.number')

            # Check if the build is still running
            if [ "$BUILD_STATUS" == "null" ]; then
              echo "Job still running... Checking again in $SLEEP_INTERVAL seconds."
            else
              echo "Jenkins job completed with status: $BUILD_STATUS"
              break
            fi

            if [ $ELAPSED_TIME -ge $MAX_WAIT_TIME ]; then
              echo "Max wait time reached. Exiting."
              exit 1
            fi

            sleep $SLEEP_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + SLEEP_INTERVAL))
          done

      - name: Get Jenkins Job Logs
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          JENKINS_JOB: ${{ github.event.inputs.jenkins_job }}
        run: |
          BUILD_NUMBER=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" "$JENKINS_URL/job/$JENKINS_JOB/api/json" | jq -r '.lastBuild.number')
          echo "Fetching logs for build number: $BUILD_NUMBER"
          LOGS=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" "$JENKINS_URL/job/$JENKINS_JOB/$BUILD_NUMBER/consoleText")
          echo "Jenkins job logs:"
          echo "$LOGS"
