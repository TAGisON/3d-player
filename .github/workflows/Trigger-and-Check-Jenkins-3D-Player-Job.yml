name: Install Prerequisites and Trigger Jenkins Job

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'The IP address of the server'
        required: true
        default: '45.79.122.237'
      ssh_user:
        description: 'SSH user'
        required: true
        default: 'rishi'
      ssh_password:
        description: 'SSH password'
        required: true
        default: ''
      jenkins_job:
        description: 'Jenkins Job to verify installation'
        required: true

jobs:
  install_and_trigger:
    runs-on: ubuntu-latest

    steps:
      - name: Install Prerequisites on Server
        env:
          SERVER_IP: ${{ github.event.inputs.server_ip }}
          SSH_USER: ${{ github.event.inputs.ssh_user }}
          SSH_PASSWORD: ${{ github.event.inputs.ssh_password }}
        run: |
          echo "Installing prerequisites on the server..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
            sudo apt update
            sudo apt install -y git curl make net-tools python3-venv pipx
            sudo pipx install --force ansible
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
          EOF

      - name: Clone Repository and Update hosts.ini
        env:
          SERVER_IP: ${{ github.event.inputs.server_ip }}
          SSH_USER: ${{ github.event.inputs.ssh_user }}
          SSH_PASSWORD: ${{ github.event.inputs.ssh_password }}
        run: |
          echo "Cloning repository and updating hosts.ini..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << EOF
            if [ -d "aether-onramp" ]; then
              echo "Removing existing aether-onramp directory..."
              sudo rm -rf aether-onramp
            fi
            git clone --recursive https://$GITHUB_ACTOR:${{ secrets.GH_TOKEN }}@github.com/TAGisON/aether-onramp.git
            cd aether-onramp || { echo "Failed to change directory"; exit 1; }
            echo "[node1]" >> hosts.ini
            echo "${SERVER_IP} ansible_user=${SSH_USER} ansible_password=${SSH_PASSWORD}" >> hosts.ini
            sed -i "s/ip: \"10.76.28.113\"/ip: \"${SERVER_IP}\"/" vars/main.yml
          EOF

      - name: Trigger Jenkins Job
        id: trigger-jenkins
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          JENKINS_JOB: ${{ github.event.inputs.jenkins_job }}
        run: |
          echo "Triggering Jenkins job..."
          TRIGGER_RESPONSE=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" -X POST "$JENKINS_URL/job/$JENKINS_JOB/build")
          
          # Extract the queue URL to track the build
          QUEUE_URL=$(echo "$TRIGGER_RESPONSE" | grep -Fi Location | awk '{print $2}' | tr -d '\r')

          if [ -z "$QUEUE_URL" ]; then
            echo "Failed to trigger Jenkins job. Queue URL not found."
            exit 1
          fi

          echo "Triggered Jenkins job. Queue URL: $QUEUE_URL"
          echo "queue_url=$QUEUE_URL" >> $GITHUB_ENV

      - name: Wait for Build to Start and Fetch Build Number
        id: fetch-build-number
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          QUEUE_URL: ${{ env.queue_url }}
        run: |
          echo "Polling Jenkins queue to fetch build number..."
          BUILD_NUMBER="null"
          for i in {1..30}; do
            BUILD_NUMBER=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" "${QUEUE_URL}api/json" | jq -r '.executable.number')
            if [ "$BUILD_NUMBER" != "null" ]; then
              echo "Build number: $BUILD_NUMBER"
              break
            fi
            echo "Waiting for build to be scheduled... Attempt: $i"
            sleep 5
          done

          if [ "$BUILD_NUMBER" == "null" ]; then
            echo "Failed to retrieve the build number from Jenkins queue after multiple attempts."
            exit 1
          fi

          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Check Jenkins Job Status
        id: jenkins-status
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          JENKINS_JOB: ${{ github.event.inputs.jenkins_job }}
          BUILD_NUMBER="${{ env.build_number }}"
        run: |
          echo "Checking the status of the Jenkins job..."
          STATUS="null"
          for i in {1..60}; do
            BUILD_INFO=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" "$JENKINS_URL/job/$JENKINS_JOB/$BUILD_NUMBER/api/json")
            STATUS=$(echo "$BUILD_INFO" | jq -r '.result')
            if [ "$STATUS" != "null" ]; then
              break
            fi
            echo "Waiting for build to complete... Attempt: $i"
            sleep 10
          done

          if [ "$STATUS" == "null" ]; then
            echo "Failed to fetch the status of the Jenkins job after multiple attempts."
            exit 1
          fi

          echo "Job Status: $STATUS"
          echo "Build Number: $BUILD_NUMBER"

          # Log the results
          echo "status=$STATUS" >> $GITHUB_ENV
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Get Jenkins Job Logs
        env:
          JENKINS_URL: 'http://45.79.122.237:8080'
          JENKINS_USER: 'coral'
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          JENKINS_JOB: ${{ github.event.inputs.jenkins_job }}
          BUILD_NUMBER="${{ env.build_number }}"
        run: |
          echo "Fetching logs for build number: $BUILD_NUMBER"
          LOGS=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" "$JENKINS_URL/job/$JENKINS_JOB/$BUILD_NUMBER/consoleText")
          echo "Jenkins job logs:"
          echo "$LOGS"

      - name: Append Job Status to STATUS.md
        run: |
          # Load environment variables
          source $GITHUB_ENV

          # Define badge color based on job status
          if [ "$status" == "SUCCESS" ]; then
            COLOR="green"
            MESSAGE="Build succeeded."
          elif [ "$status" == "FAILURE" ]; then
            COLOR="red"
            MESSAGE="Build failed."
          elif [ "$status" == "UNSTABLE" ]; then
            COLOR="yellow"
            MESSAGE="Build is unstable."
          else
            COLOR="blue"
            MESSAGE="Build is still running or unknown state."
          fi

          # Append the new status to STATUS.md with the job status badge, build number, and message
          {
            echo "![Jenkins Job Status](https://img.shields.io/badge/Jenkins-$status-$COLOR?style=flat-square)"
            echo ""
            echo "Build Number: $build_number"
            echo "Message: $MESSAGE"
            echo "---"
          } >> STATUS.md

      - name: Commit and Push STATUS.md
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add STATUS.md
          git commit -m "Update STATUS.md with Jenkins job status"
          git push https://x-access-token:${GH_TOKEN}@github.com/TAGisON/aether-onramp.git
